@page "/Cliente/Panel/InicioPanel"
@using Agapea_Blazor_2024.Client.Models.Services.Interfaces
@using Agapea_Blazor_2024.Client.Models.Services
@using System.ComponentModel.DataAnnotations

@inject IStorageService storageSvc
@inject NavigationManager navigate
@inject IRestService restSvc
@inject IJSRuntime jsSvc

<div class="container">
    <div class="row">
        <div class="col">
            <h2>Mi perfil</h2>
            <div></div><!--sangria-->
            <div class="alert alert-secondary" data-bs-toggle="collapse" href="#collapseDatos">Datos de perfil</div>
            <div class="collapse" id="collapseDatos">

                 <EditForm EditContext="this.FormContext" OnSubmit="this.UpdateCliente">
                     <!-- si lo haces asi intentara validar la password, y no quiero q sea campo obligatorio...provoco validacion desde codigo
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary style="color:red"></ValidationSummary>
                     -->
                    <!-- mi validationsummary...-->                    
                    @if (this.ErroresValidacion.Count > 0)
                    {
                    <div class="row">
                        <ul>
                            @foreach (String item in this.ErroresValidacion)
                            {
                                    <li><span style="color:red">@item</span></li>
                            }

                        </ul>
                    </div>    
                    }

                    <div class="row">
                        <div class="col-sm-6">
                            <div class="row text-muted">Correo electrónico</div>
                            <div class="row"><input type="text" id="inputEmail" class="input-group-text" style="width:90%" @bind="@this.clienteLogged.Credenciales.Email" /></div>
                            <div class="row text-muted">Contraseña</div>
                            <div class="row"><input type="password" id="inputPass" class="input-group-text" style="width:90%" @bind="@this.clienteLogged.Credenciales.Password" /></div>
                            <div class="row text-muted">Nombre</div>
                            <div class="row"><input type="text" id="inputNombre" class="input-group-text" style="width:90%" @bind="@this.clienteLogged.Nombre" /></div>

                        </div>

                        <div class="col-sm-6">
                            <div class="row text-muted">Teléfono</div>
                            <div class="row"><input type="text" id="inputTlfn" class="input-group-text" style="width:90%" @bind="@this.clienteLogged.Telefono" /></div>
                            <div class="row text-muted">Repetir la contraseña</div>
                            <div class="row"><input type="password" id="inputPassRep" class="input-group-text" style="width:90%" @bind="@this.repassword" /></div>
                            <div class="row text-muted">Apellidos</div>
                            <div class="row"><input type="text" id="inputApellidos" class="input-group-text" style="width:90% " @bind="@this.clienteLogged.Apellidos" /></div>

                        </div>
                    </div>

                    <div class="row">
                        <div class="col-sm-4">
                            <div class="text-muted">Foto</div>

                            <div id="avatarPerfil" class="card" style="width:200px;height:250px; background-color:aliceblue" onclick="javascript: window.document.getElementById('selectorImagen').dispatchEvent(new MouseEvent('click'));">
                                <InputFile id="selectorImagen" accept="image/*" style="visibility:hidden;" OnChange="PrevisualizarImagen" />

                                <img src="@this.ImgSrc" id="imagenUsuario" style="width:200;height:250;" />

                            </div>
                            @if (! String.IsNullOrEmpty(this.MensajeUploadImgServer))
                            {
                                <div id="mensajeServer"><span style=@(this.MensajeUploadImgServer.Contains("OK") ? "color:green" : "color:red")>@this.MensajeUploadImgServer</span></div>

                            }
                            <button id="botonUploadImagen" type="button" class="btn btn-link btn-sm" disabled="@this.btnUploadImgDisabled" @onclick="@this.UploadImagen">+ Sube una foto</button>

                        </div>
                        <div class="col-sm-8">
                            <div class="row text-muted">Usuario</div>
                            <div class="row"><input type="text" id="inputUsuario" class="input-group-sm" @bind="@this.clienteLogged.Credenciales.Login" /></div>
                            <div class="row text-muted">Genero</div>
                            <div class="row">
                                <select class="form-select" aria-label="Elige genero" @bind="@this.clienteLogged.Genero">
                                    <option selected>Elige genero</option>

                                    <option value="Hombre">Hombre</option>
                                    <option value="Mujer">Mujer</option>
                                </select>
                            </div>
                            <div class="row text-muted">Fecha de nacimiento</div>
                            <div class="row">
                                <div class="col-sm-4">
                                    <select name="dia" id="dia" class="form-select">
                                        <option>Elige día</option>
                                        @for (int a = 1; a <= 31; a++)
                                        {
                                            <option value="@a">@a</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-sm-4">
                                    <select name="mes" id="mes" class="form-select">
                                        <option>Elige mes</option>
                                        @foreach (KeyValuePair<String, String> elemento in this.meses)
                                        {
                                            <option value="@elemento.Key">@elemento.Value</option>
                                        }

                                    </select>
                                </div>
                                <div class="col-sm-4">
                                    <select name="anio" id="anio" class="form-select">
                                        <option value="" selected="">Elige año</option>
                                        @for (int a = 2022; a >= 1923; a--)
                                        {
                                            <option value="@a">@a</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="row text-muted">Descripcion</div>
                            <div class="row"><textarea id="textArea" @bind="@this.clienteLogged.Descripcion">@this.clienteLogged.Descripcion</textarea> </div>
                            <div class="row">
                                <div class="col-6 ro2 align-text-top"><a href=""> Darme de baja</a></div>
                                <div class="col-6">
                                    <button type="submit" id="btnSubmitCliente" class="btn btn-primary btn-sm">Guardar Nuevos Datos del Cliente</button>
                                </div>
                            </div>

                        </div>
                    </div>

                    @if (! String.IsNullOrEmpty(this.MensajeUpdateDatosCliente))
                    {
                        <div class="row"><span style=@(this.MensajeUpdateDatosCliente.Contains("OK") ? "color:green": "color:red")>@this.MensajeUpdateDatosCliente</span></div>
                    }
                </EditForm>

            </div>

            <div class="alert alert-secondary" data-bs-toggle="collapse" href="#collapseDirecciones">Direcciones</div>
            <div class="collapse" id="collapseDirecciones">
                <div>
                    <p> Guarda todas tus direcciones de envío y elige la que usarás por defecto donde llegarán tus pedidos.</p>

                    <p>
                        Estas son las direcciones a las que puedes hacer tus envíos. Las direcciones de envío serán las que elijas mientras que la
                        facturación será la misma en todas las direcciones:
                    </p>
                </div>

                <hr />
                <!-- lista de direcciones del cliente -->
                <div class="container">
                    @foreach (Direccion unadirec in this.clienteLogged.DireccionesCliente)
                    {
                        <MiniDireccion direc="@unadirec"
                                        EliminarDireccionEvento="@((Direccion direc)=> OperarDireccion(direc,"borrar"))"
                                        ModificarDireccionEvento="@((Direccion direc)=> OperarDireccion(direc,"pendiente-modificar"))"></MiniDireccion>
                    }
                </div>

                <!-- Button trigger modal -->
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    + Nueva Direccion
                </button>

                <!-- Modal -->
                <FormModalDirecciones @ref="@refModal" 
                                    CrearModificarEvent="@((Dictionary<Direccion,string>datos)=> this.OperarDireccion(datos.Keys.ToArray<Direccion>()[0], datos.Values.ToArray<string>()[0] ))">

                </FormModalDirecciones>


            </div>
        </div>
    </div>
</div>

@code {
    EditContext FormContext;

    public Cliente clienteLogged { get; set; }
    FormModalDirecciones refModal ;
    public String operacion { get; set; } = "crear";
    public Dictionary<string, string> meses = new Dictionary<String, String>()
                                {
                                    { "01", "Enero"},
                                    { "02", "Febrero"},
                                    { "03", "Marzo"},
                                    { "04", "Abril"},
                                    { "05", "Mayo"},
                                    { "06", "Junio"},
                                    { "07", "Julio"},
                                    { "08", "Agosto"},
                                    { "09", "Septiembre"},
                                    { "10", "Octubre"},
                                    { "11", "Noviembre"},
                                    { "12", "Diciembre"}
                                };
    private String ImgSrc { get; set; } 
    private String MensajeUploadImgServer { get; set; } = "";
    bool btnUploadImgDisabled = true;

    private String MensajeUpdateDatosCliente { get; set; } = "";
    private String repassword { get; set; } = "";
    private List<String> ErroresValidacion { get; set; } = new List<String>();

    protected override async Task OnInitializedAsync()
    {
        this.clienteLogged=this.storageSvc.RecuperarDatosCliente();
        if(this.clienteLogged != null)
        {
            this.ImgSrc = this.clienteLogged.Credenciales.ImagenCuentaBASE64;
            await this.jsSvc.InvokeVoidAsync("console.log", "datos del cliente...", this.clienteLogged);
            FormContext = new EditContext(this.clienteLogged);
            FormContext.EnableDataAnnotationsValidation();
        }

    }
    #region ///GESTION DE DATOS DEL CLIENTE///
    public async Task PrevisualizarImagen(InputFileChangeEventArgs ev)
    {
        IBrowserFile _fichimagen = ev.File;
        //tengo q leer el contenido del fichero imagen seleccionado como un array de bytes
        //y pasar ese array de bytes a base64 y mostrarlo en el src del elemento <img src="...">
        //en formato "data: image/tipo;base64, ..."
        byte[] _contfich = new byte[_fichimagen.Size];
        await _fichimagen.OpenReadStream().ReadAsync(_contfich);

        this.ImgSrc = $"data:{_fichimagen.ContentType};base64, {Convert.ToBase64String(_contfich)}";
        this.btnUploadImgDisabled = false;

    }
    public async Task UploadImagen()
    {
        //tengo q subir al servidor la imagen avatar del usuario...
        RestMessage _resp = await this.restSvc.UploadImagen(this.ImgSrc, this.clienteLogged.IdCliente);
        if (_resp.Codigo == 0)
        {
            //refresco los datos del cliente, pq tiene nueva imagen...
            this.storageSvc.AlmacenamientoDatosCliente(_resp.DatosCliente);
            this.storageSvc.AlmacenamientoJWT(_resp.Tokensesion);
            this.btnUploadImgDisabled = true;
            this.MensajeUploadImgServer = _resp.Mensaje;

            //para q imagen recien subida aparezca en el panel lateral disparo evento del servicio storage, q intercepta el listener q esta en el mainlayout, y asi refrescara panel...
            (this.storageSvc as SubjectStorage).DisparaEventoRefrescoDatosCliente(_resp.DatosCliente);

        }
        else
        {
            //mostrar mensajes de error en div debajo del boton +Subir Foto... aunque ya lo hago en la vista viendo si el mensaje de respuesta contiene o no "OK"
        }
    }
    public async Task UpdateCliente()
    {
        //Validaciones del modelo
        this.ErroresValidacion.Clear();

        bool _resvalid = this.FormContext.Validate();
        if(this.clienteLogged.Credenciales.Password == this.repassword)
        {
            if(!_resvalid)
            {
                this.ErroresValidacion = this.FormContext.GetValidationMessages().ToList<String>();
                //Vemos si la pasword está rellenada. Si no, no hacemos caso a los errores
                bool _errorPass = this.ErroresValidacion.Any<String>(item => !item.Contains("Contraseña"));
                if(_errorPass || ! String.IsNullOrEmpty(this.clienteLogged.Credenciales.Password))
                {
                    return;
                }
            }
        }
        else
        {
            this.ErroresValidacion.Add("* Las contraseñas no coinciden");
            return;
        }

        //si no hay errores de validacion, actualizo datos del cliente...
        RestMessage _resp = await this.restSvc.UpdateCliente(this.clienteLogged);
        if (_resp.Codigo == 0)
        {
            this.storageSvc.AlmacenamientoDatosCliente(_resp.DatosCliente);
            this.storageSvc.AlmacenamientoJWT(_resp.Tokensesion);
            this.MensajeUpdateDatosCliente = _resp.Mensaje;
            //para q imagen recien subida aparezca en el panel lateral disparo evento del servicio storage, q intercepta el listener q esta en el mainlayout, y asi refrescara panel...
            (this.storageSvc as SubjectStorage).DisparaEventoRefrescoDatosCliente(_resp.DatosCliente);
        }
        else
        {
            this.MensajeUpdateDatosCliente = _resp.Error;
        }
    }
    #endregion

    #region ///GESTION DE DIRECCIONES DEL CLIENTE///
    public async Task OperarDireccion(Direccion direc, String operacion)
    {
            RestMessage _resp = new RestMessage();
            switch (operacion)
            {
                case "pendiente-modificar":
                    //mostrar el popup de crear direccion con los datos de la direccion a modificar
                    this.refModal.direccionEd = direc;
                    this.refModal.operacion = "modificar";
                    this.refModal.textButtonForm = "Modificar Direccion";
                    await this.jsSvc.InvokeVoidAsync("window.adminFormModal.ShowModal", "staticBackdrop");
                    break;

                case "crear":
                    direc.IdCliente = this.clienteLogged.IdCliente;
                    _resp = await this.restSvc.OperarDireccion(direc, operacion);
                    if (_resp.Codigo == 0)
                    {
                        this.clienteLogged = _resp.DatosCliente;
                        this.storageSvc.AlmacenamientoDatosCliente(_resp.DatosCliente);
                        this.storageSvc.AlmacenamientoJWT(_resp.Tokensesion);

                        StateHasChanged();
                    }
                    else
                    {
                        //mostrar en vista mensaje de error al crear direccion
                        await this.jsSvc.InvokeVoidAsync("console.log", _resp.Error);
                    }
                    break;
                case "modificar":
                    direc.IdCliente = this.clienteLogged.IdCliente;
                    _resp = await this.restSvc.OperarDireccion(direc, operacion);
                    if (_resp.Codigo == 0)
                    {
                        this.clienteLogged = _resp.DatosCliente;
                        this.storageSvc.AlmacenamientoDatosCliente(_resp.DatosCliente);
                        this.storageSvc.AlmacenamientoJWT(_resp.Tokensesion);

                        StateHasChanged();
                    }
                    else
                    {
                        //mostrar en vista mensaje de error al modificar direccion
                        await this.jsSvc.InvokeVoidAsync("console.log", _resp.Error);
                    }
                    break;
                case "borrar":
                    direc.IdCliente = this.clienteLogged.IdCliente;

                    _resp = await this.restSvc.OperarDireccion(direc, operacion);
                    if (_resp.Codigo == 0)
                    {
                        this.clienteLogged = _resp.DatosCliente;
                        this.storageSvc.AlmacenamientoDatosCliente(_resp.DatosCliente);
                        this.storageSvc.AlmacenamientoJWT(_resp.Tokensesion);

                        StateHasChanged();
                    }
                    else
                    {
                        //mostrar en vista mensaje de error al eliminar direccion
                        await this.jsSvc.InvokeVoidAsync("console.log", _resp.Error);
                    }

                    break;
            }

    }
    #endregion
}
