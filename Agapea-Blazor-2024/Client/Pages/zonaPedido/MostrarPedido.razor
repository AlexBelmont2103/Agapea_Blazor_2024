@page "/Tienda/MostrarPedido"
@*
    si en la url vienen dos parametros en la querystring, el primero es el idPedido y el segundo el idCliente
    esto significa que el pedido no ha sido finalizado, tengo que recuperar datos del pedido, del cliente y volver a pintar la vista
    mostrando mensaje de error "FALLO EN PAGO CON PAYPAL, INTENTELO DE NUEVO O SELECCIONE OTRO METODO DE PAGO"
*@
@using Agapea_Blazor_2024.Client.Models.Services.Interfaces

@inject IStorageService storageSvc
@inject NavigationManager navigate
@inject IRestService restSvc
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row">
        <!-- columna para datos del pedido: direccion envio, facturacion, datos pago-->
        <div class="col-7">
            <EditForm EditContext="this.formPedidoEditContext" OnValidSubmit="FinalizarPedido">
                <CascadingValue Name="formPedidoEditContext" Value="formPedidoEditContext">
                    <CascadingValue Name="clienteLogged" Value="clienteLogged">
                        <CascadingValue Name="listaProvincias" Value="listaProvincias">

                            <DatosEntregaPedido ShowDatosFacturaEvent="@((valor)=>{ this.ShowDatosFacturaPedido=valor; })" operarGastosEnvioEvent="@ModificarGastosEnvio"></DatosEntregaPedido>
                            @if (this.ShowDatosFacturaPedido)
                            {
                                <DatosFacturacionPedido></DatosFacturacionPedido>
                            }
                            <DatosPagoPedido tituloPago="@(this.ShowDatosFacturaPedido==true ? "3. - Pago" : "2. - Pago")"></DatosPagoPedido>

                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
                <div class="d-flex flex-row justify-content-center mt-3">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="fa-solid fa-truck-fast"></i>  Finalizar Pedido
                    </button>
                </div>
            </EditForm>
        </div>

        <!-- columna para elementos del pedido, subtotal, gastos envio y total -->
        <div class="col-5">
            <div class="container">
                <div class="row">
                    <div class="col"><h5><strong>Resumen de la cesta</strong></h5></div>
                </div>
                @foreach (ItemPedido item in this._listaItems)
                {
                    <div class="row">
                        <div class="col">
                            <ElementoPedido elemento="@item" operarItemEvent="@ModificarItemPedido"></ElementoPedido>
                        </div>
                    </div>
                }
                <hr />

                <div class="row">
                    <div class="col-10"><p><strong>Subtotal:</strong></p></div>
                    <div class="col-2"><p style="color:red">@Subtotal €</p></div>
                </div>

                <div class="row">
                    <div class="col-10"><p><strong>Gastos de envio y Gestion:</strong></p></div>
                    <div class="col-2"><p style="color:red">@GastosEnvio €</p></div>
                </div>

                <div class="row" style="background: grey">
                    <div class="col-10"><p><strong>Total a pagar:</strong></p></div>
                    <div class="col-2"><p style="color:red">@Total €</p></div>
                </div>

                <div class="row">
                    <small>El periodo de entrega es <span style="color:forestgreen">de 24 a 48 Horas</span></small>
                </div>

                <div class="row d-flex flex-row justify-content-between">
                    <a class="btn btn-light"
                       onclick="@(()=>this.navigate.NavigateTo("/Tienda/Libros"))">
                        <i class="fa-solid fa-book"></i> Seguir Comprando
                    </a>

                    <a class="btn btn-primary">
                        <i class="fa-solid fa-truck"></i> Finalizar Pedido
                    </a>
                </div>

            </div>
        </div>
    </div>
</div>


@code {
    //Parametros opcionales de la querystring
    [Parameter]
    [SupplyParameterFromQuery(Name = "idcliente")]
    public String idCliente { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "idpedido")]
    public String idPedido { get; set; }

    public List<ItemPedido> _listaItems { get; set; } = new List<ItemPedido>();
    public Cliente clienteLogged { get; set; }
    public List<Provincia> listaProvincias { get; set; }
    private bool ShowDatosFacturaPedido { get; set; } = false;
    public EditContext formPedidoEditContext { get; set; }
    public DatosPago? datosPago;
    public Decimal Subtotal { get; set; }
    public Decimal GastosEnvio { get; set; } = 0;
    public Decimal Total { get; set; }
    public Pedido pedido { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.clienteLogged = this.storageSvc.RecuperarDatosCliente();
        this._listaItems = this.storageSvc.RecuperarElementosPedido();
        this.listaProvincias = await this.restSvc.RecuperarProvincias();
        this.datosPago = new DatosPago();
        this.Subtotal = CalcularSubtotal();
        this.Total = CalcularTotal();
        this.formPedidoEditContext = new EditContext(this.datosPago);
    }

    public void ModificarItemPedido(KeyValuePair<String, ItemPedido> datos)
    {
        this.storageSvc.OperarElementosPedido(datos.Value.LibroItem, datos.Key);
        //Aprovechamos para calcular el subtotal
        this.Subtotal = CalcularSubtotal();
        this.Total = CalcularSubtotal();
        StateHasChanged();
    }
    public void ModificarGastosEnvio(String codPro)
    {
        //Recibimos el codPro del componente "DatosEntregaPedido"
        CalcularGastosEnvio(codPro);
    }
    private Decimal CalcularSubtotal()
    {
        Decimal subtotal = 0;
        foreach (ItemPedido item in this._listaItems)
        {
            subtotal += Math.Round(item.LibroItem.Precio * item.CantidadItem, 2);
        }
        return subtotal;
    }
    private void CalcularGastosEnvio(String codPro)
    {

        Decimal gastosEnvio = 0;
        //Si el codPro es 35, 38, 51, o 52, los gastos de envio son 5. Si no, son 2
        if (codPro == "35" || codPro == "38" || codPro == "51" || codPro == "52")
        {
            gastosEnvio = 5;
        }
        else
        {
            gastosEnvio = 2;
        }
        this.GastosEnvio = gastosEnvio;
        this.Total = CalcularTotal();
    }
    private Decimal CalcularTotal()
    {
        return this.Subtotal + this.GastosEnvio;
    }
    private async Task FinalizarPedido()
    {
        //Hacemos preventDefault para evitar que se recargue la página

        //Mostramos el formulario por consola

        if (datosPago != null)
        {
            Console.WriteLine("Formulario enviado");
            //Construimos el pedido con el objeto datoPago
            this.pedido = new Pedido();
            this.pedido.IdCliente = this.clienteLogged.IdCliente;
            this.pedido.ElementosPedido = this._listaItems;
            this.pedido.DireccionEnvio = this.datosPago.DireccionEnvio;
            this.pedido.DireccionFacturacion = this.datosPago.DireccionFactura;
            this.pedido.SubTotal = this.Subtotal;
            this.pedido.GastosEnvio = this.GastosEnvio;
            this.pedido.Total = this.Total;
            this.pedido.EstadoPedido = "Pendiente";
            string _urlSalto = await this.restSvc.FinalizarPedido(this.datosPago, pedido);
            await this.JSRuntime.InvokeVoidAsync("console.log", "URL SALTO PAYPAL....", _urlSalto);

            await this.JSRuntime.InvokeVoidAsync("window.location.assign", _urlSalto);
        }

        else
        {
            Console.WriteLine("No se ha enviado el formulario");
        }

    }
}
