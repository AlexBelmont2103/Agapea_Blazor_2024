@page "/Tienda/MostrarDetallesLibro/{isbn13}"
@using Agapea_Blazor_2024.Client.Models.Services.Interfaces
@inject IRestService restSvc
@inject IJSRuntime jsSvc
@inject NavigationManager navigate
@inject IStorageService storageSvc
<div class="row">
    <div class="col-8">
        <div class="mb-3" style="max-width: 540px;">
            <div class="row g-0">
                <div class="col-md-4" style="height: 170px">
                    <div class="container">
                        <div class="row">
                            <div class="w-100" style="height: 80%">
                                <img src="@this.libro.ImagenLibroBASE64" class="img-fluid rounded-start" alt="...">
                            </div>
                        </div>
                        <div class="row mt-3">
                            <a onclick="@AddLibroPedido" class="btn btn-primary btn-sm" style="visibility: visible;">Comprar</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-8 ps-1">
                    <div class="ms-3">
                        <h5 class="card-title">@this.libro.Titulo</h5>
                        <h6 class="card-text">@this.libro.Autores</h6>
                        <hr />
                        <h6>Detalles del libro</h6>
                        <div class="row">
                            <div class="col-3">
                                <div class="card-text text-muted">Editorial</div>
                                <div class="card-text text-muted">Edición</div>
                                <div class="card-text text-muted">Páginas</div>
                                <div class="card-text text-muted">Dimensiones</div>
                                <div class="card-text text-muted">Idioma</div>
                                <div class="card-text text-muted">ISBN</div>
                                <div class="card-text text-muted">ISBN-10</div>
                            </div>
                            <div class="col-9 ps-4">
                                <div class="card-text">@this.libro.Editorial</div>
                                <div class="card-text">@this.libro.Edicion</div>
                                <div class="card-text">@this.libro.NumeroPaginas </div>
                                <div class="card-text">@this.libro.Dimensiones</div>
                                <div class="card-text">@this.libro.Idioma</div>
                                <div class="card-text">@this.libro.ISBN13</div>
                                <div class="card-text">@this.libro.ISBN10</div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-4 px-0">
        <div class="bg-light p-3 border border-1">
            <div class="container bg-white border border-1 p-2">
                <div class="d-flex flex-row-reverse align-items-end w-100">
                    <h4 class="mx-2">€</h4><h2>@this.libro.Precio</h2>
                </div>
                <div class="container px-3">
                    <div class="row">
                        <div class="col-4 border border-2 border-primary d-flex align-items-center justify-content-center"><img src="" /></div>
                        <div class="col-8 border border-2 border-primary border-start-0 d-flex flex-column justify-content-center p-2">
                            <div class="d-flex justify-content-around"><span class="text-primary"><strong>Envío Gratis</strong><i class="fa-solid fa-circle-info mx-2"></i></span> </div>
                            <div class="d-flex justify-content-around"><span class="text-primary"><small>al comprar este libro</small></span></div>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-center py-3 px-1">
                    <a onclick="@AddLibroPedido" class="btn btn-primary w-100 p-2" style="border-radius: 0px"><i class="fa-solid fa-cart-shopping pe-2"></i><strong> Comprar / Recoger</strong></a>
                </div>
                <div class="d-flex flex-row justify-content-between px-1">
                    <a class="btn btn-outline-primary p-2 flex-fill" style="border-radius: 0px"> <small>Agregar a la lista de deseos</small></a>


                    <a id="despliega-listas" class="btn btn-outline-primary ms-2 border border-1 border-primary position-relative" style="border-radius: 0px">
                        <strong>:</strong>
                        <div class="position-absolute top-100 start-0 visually-hidden" id="dropdown-listas" style="width: 150px">
                            <div class="btn btn-outline-primary w-100" style="border-radius: 0px">Agregar nueva lista</div>
                            <div class="btn btn-outline-primary border-top-0 w-100" style="border-radius: 0px">Ver más listas</div>
                        </div>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
<!--    /// ZONA DE COMENTARIOS ///   -->
<div class="row">
    <div class="col">
        <div id="secComentarios" class="contsocial">

            <div class="darValoracion sinBordTop">
                <h4>Danos tu valoración de este libro</h4>
                <div id="estrellas" class="d-flex flex-row justify-content-center">
                    <ul class="list-group list-group-horizontal">

                        @if (clientelogged != null && clienteTieneLibro)
                        {

                            @for (int a = 1; a <= 5; a++)
                            {

                                <li class="list-group-item">
                                    @{int _valor = a;}
                                    <button @onclick="@(()=>OnClickEstrella(_valor))" value="@a">@a</button>

                                </li>


                            }
                        }
                        else
                        {
                            <p>DEBES ESTAR LOGGUEADO Y HABER COMPRADO EL LIBRO PARA PODER OPINAR</p>


                        }

                    </ul>
                </div>
            </div>

            <hr />

            <div id="contenedorResumenComentarios" class="">
                <div class="darValoracion sinPadBot">
                    <div class="d-flex flex-row justify-content-center">
                        <!-- aqui tienes q mostrar tantas estrellas como valoracion media tenga el libro...-->
                        @{
                            if (opiniones.Count > 0)
                            {
                                int _valoracionMedia = 0;
                                foreach (Opinion opi in opiniones)
                                {
                                    _valoracionMedia += opi.Valoracion;
                                }
                                _valoracionMedia = _valoracionMedia / opiniones.Count;
                                for (int a = 1; a <= _valoracionMedia; a++)
                                {
                                    <i class="fa-solid fa-star" style="color:#0d6efd;"></i>
                                }
                            }

                        }
                        <span class="numeroValoraciones">@opiniones.Count valoractiones - y opiniones</span>
                    </div>
                    <div class="separadorValoracion"></div>

                    <div id="listacomentarios mt-3">
                        <!-- aqui la lista de comentarios sobre el libro de los distintos clientes...-->
                        @if (opiniones.Count > 0)
                        {
                            foreach (Opinion unaopinion in opiniones)
                            {
                                if(unaopinion.EsModerada)
                                {
                                    <MiniOpinion opi="@unaopinion" />
                                }
                            }
                        }
                        else
                        {
                            <div class="alert alert-info" role="alert">
                                Este libro no tiene opiniones todavia
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>
        <!--///MODAL///-->
        <ModalComentario libro="@libro" opinion="@nuevaOpinion" OnEnviarOpinion="@ManejarOpinionEvent"></ModalComentario>
    </div>
</div>

@code {
    [Parameter]
    public String isbn13 { get; set; }

    public Libro libro { get; set; } = new Libro();
    public Cliente? clientelogged { get; set; }
    public bool clienteTieneLibro { get; set; } = false;
    public List<Opinion> opiniones { get; set; } = new List<Opinion>();
    public Opinion nuevaOpinion { get; set; } = new Opinion();

    protected override async Task OnInitializedAsync()
    {
        this.libro = await this.restSvc.RecuperarLibro(this.isbn13);
        this.opiniones = await this.restSvc.RecuperarOpiniones(this.isbn13);
        Console.WriteLine(this.libro.Titulo);
        this.clientelogged = this.storageSvc.RecuperarDatosCliente();
        if (this.clientelogged == null)
        {
            this.clientelogged = new Cliente();
        }
        this.nuevaOpinion.IdCliente = this.clientelogged.IdCliente;
        this.nuevaOpinion.isbn13 = this.libro.ISBN13;
        //Recorremos cada pedido del cliente y comprobamos si alguno de ellos contiene el libro que estamos viendo
        foreach (var pedido in this.clientelogged.PedidosCliente)
        {
            foreach (var item in pedido.ElementosPedido)
            {
                if (item.LibroItem.ISBN13 == this.libro.ISBN13)
                {
                    this.clienteTieneLibro = true;
                    break;
                }
            }
        }

    }
    private void AddLibroPedido()
    {
        try
        {
            this.storageSvc.OperarElementosPedido(this.libro, "agregar");
            this.navigate.NavigateTo("/Tienda/MostrarPedido");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
    public async Task ManejarOpinionEvent(Opinion opinion)
    {        
        RestMessage _resp = await this.restSvc.UploadOpinion(opinion);
        if (_resp.Codigo == 0)
        {
            this.storageSvc.AlmacenamientoDatosCliente(_resp.DatosCliente);
            this.storageSvc.AlmacenamientoJWT(_resp.Tokensesion);
            await this.jsSvc.InvokeVoidAsync("window.adminFormModal.HideModal", "modalComentarios");
            this.jsSvc.InvokeVoidAsync("alert", "Opinion guardada correctamente. Pendiente de ser moderada por el administrador");
        }
    }
    public async Task OnClickEstrella(int valor)
    {

        nuevaOpinion.Valoracion = valor
        await this.jsSvc.InvokeVoidAsync("window.adminFormModal.ShowModal", "modalComentarios");
    }

}
